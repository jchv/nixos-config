From f40f87ab4e3b5b5726748c5cefb586aa0bb7caf4 Mon Sep 17 00:00:00 2001
From: John Chadwick <john@jchw.io>
Date: Sun, 6 Oct 2024 03:47:11 -0400
Subject: [PATCH] PreviewJob: Use kio-fuse for remote files

Previously, PreviewJob copied the remote file to a local temporary file if a
thumbnail plugin requires access to a local file path. This makes it infeasible
to preview large files, like videos.

This commit makes PreviewJob use kio-fuse to expose local file paths to these
plugins for otherwise remote files, similar to how DesktopExecParser does it for
non-KIO applications.

Co-authored-by: Andrew Gunnerson <chillermillerlong@hotmail.com>
---
 src/gui/CMakeLists.txt |  8 ++++-
 src/gui/previewjob.cpp | 67 +++++++++++++++++++++++++++++++++++++++---
 2 files changed, 70 insertions(+), 5 deletions(-)

diff --git a/src/gui/CMakeLists.txt b/src/gui/CMakeLists.txt
index 15362a906..ec369c4a1 100644
--- a/src/gui/CMakeLists.txt
+++ b/src/gui/CMakeLists.txt
@@ -31,7 +31,13 @@ target_sources(KF6KIOGui PRIVATE
 )
 
 if (HAVE_QTDBUS)
-    target_sources(KF6KIOGui PRIVATE dbusactivationrunner.cpp)
+    set(kiofuse_dbus_SRCS)
+    qt_add_dbus_interface(kiofuse_dbus_SRCS ../core/org.kde.KIOFuse.VFS.xml kiofuse_interface)
+
+    target_sources(KF6KIOGui PRIVATE
+        ${kiofuse_dbus_SRCS}
+        dbusactivationrunner.cpp
+    )
 endif ()
 
 if (HAVE_QTDBUS AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
diff --git a/src/gui/previewjob.cpp b/src/gui/previewjob.cpp
index d4da3e40d..89ff1947b 100644
--- a/src/gui/previewjob.cpp
+++ b/src/gui/previewjob.cpp
@@ -58,9 +58,19 @@
 
 #include "job_p.h"
 
+#ifdef WITH_QTDBUS
+#include <QDBusConnection>
+#include <QDBusError>
+#include <QDBusReply>
+
+#include "kiofuse_interface.h"
+#endif
+
 namespace
 {
 static qreal s_defaultDevicePixelRatio = 1.0;
+// Time (in milliseconds) to wait for kio-fuse in a PreviewJob before giving up.
+static constexpr int s_kioFuseMountTimeout = 10000;
 }
 
 namespace KIO
@@ -157,8 +167,14 @@ public:
     // Device ID for each file. Stored while in STATE_DEVICE_INFO state, used later on.
     QMap<QString, int> deviceIdMap;
     enum CachePolicy { Prevent, Allow, Unknown } currentDeviceCachePolicy = Unknown;
+    // the path of a unique temporary directory
+    QString m_tempDirPath;
+    // Whether to try using KIOFuse to resolve files. Set to false if KIOFuse is not available.
+    bool tryKioFuse = true;
 
     void getOrCreateThumbnail();
+    void createThumbnailViaFuse(const QUrl &, const QUrl &);
+    void createThumbnailViaLocalCopy(const QUrl &);
     bool statResultThumbnail();
     void createThumbnail(const QString &);
     void cleanupTempFile();
@@ -704,13 +720,57 @@ void PreviewJobPrivate::getOrCreateThumbnail()
         determineNextFile();
         return;
     }
-    // No plugin support access to this remote content, copy the file
-    // to the local machine, then create the thumbnail
+    // The plugin does not support this remote content, either copy the
+    // file, or try to get a local path using KIOFuse
+    if (tryKioFuse) {
+        createThumbnailViaFuse(item.targetUrl(), item.mostLocalUrl());
+        return;
+    }
+
+    createThumbnailViaLocalCopy(item.mostLocalUrl());
+}
+
+void PreviewJobPrivate::createThumbnailViaFuse(const QUrl &fileUrl, const QUrl &localUrl)
+{
+    Q_Q(PreviewJob);
+#if defined(WITH_QTDBUS) && !defined(Q_OS_ANDROID)
+    state = PreviewJobPrivate::STATE_GETORIG;
+    org::kde::KIOFuse::VFS kiofuse_iface(QStringLiteral("org.kde.KIOFuse"), QStringLiteral("/org/kde/KIOFuse"), QDBusConnection::sessionBus());
+    kiofuse_iface.setTimeout(s_kioFuseMountTimeout);
+    QDBusPendingReply<QString> reply = kiofuse_iface.mountUrl(fileUrl.toString());
+    QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(reply, q);
+
+    QObject::connect(watcher, &QDBusPendingCallWatcher::finished, q, [this, localUrl](QDBusPendingCallWatcher *watcher) {
+        QDBusPendingReply<QString> reply = *watcher;
+        watcher->deleteLater();
+
+        if (reply.isError()) {
+            // Don't try kio-fuse again if it is not available
+            if (reply.error().type() == QDBusError::ServiceUnknown || reply.error().type() == QDBusError::NoReply) {
+                tryKioFuse = false;
+            }
+
+            // Fall back to copying the file to the local machine
+            createThumbnailViaLocalCopy(localUrl);
+        } else {
+            // Use file exposed via the local fuse mount point
+            createThumbnail(reply.value());
+        }
+    });
+#else
+    createThumbnailViaLocalCopy(localUrl);
+#endif
+}
+
+void PreviewJobPrivate::createThumbnailViaLocalCopy(const QUrl &url)
+{
+    Q_Q(PreviewJob);
     state = PreviewJobPrivate::STATE_GETORIG;
     QTemporaryFile localFile;
 
     // Some thumbnailers, like libkdcraw, depend on the file extension being
     // correct
+    const KFileItem &item = currentItem.item;
     const QString extension = item.suffix();
     if (!extension.isEmpty()) {
         localFile.setFileTemplate(QStringLiteral("%1.%2").arg(localFile.fileTemplate(), extension));
@@ -719,8 +779,7 @@ void PreviewJobPrivate::getOrCreateThumbnail()
     localFile.setAutoRemove(false);
     localFile.open();
     tempName = localFile.fileName();
-    const QUrl currentURL = item.mostLocalUrl();
-    KIO::Job *job = KIO::file_copy(currentURL, QUrl::fromLocalFile(tempName), -1, KIO::Overwrite | KIO::HideProgressInfo /* No GUI */);
+    KIO::Job *job = KIO::file_copy(url, QUrl::fromLocalFile(tempName), -1, KIO::Overwrite | KIO::HideProgressInfo /* No GUI */);
     job->addMetaData(QStringLiteral("thumbnail"), QStringLiteral("1"));
     q->addSubjob(job);
 }
-- 
2.46.1

